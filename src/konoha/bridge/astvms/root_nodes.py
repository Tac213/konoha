# -*- coding: utf-8 -*-
# author: Tac
# contact: cookiezhx@163.com

import ast

from PySide6 import QtCore

from konoha.utils import advanced_qt_property
from konoha.bridge import astvms
from konoha.bridge.astvms import astvm


@astvms.ast_node
class TypeIgnore(astvm.type_ignore_vm):
    """
    View Model of ast.TypeIgnore
    """

    tag = advanced_qt_property.AdvancedQtProperty(str)  # type: str

    def __init__(self, parent: QtCore.QObject | None = None) -> None:
        super().__init__(parent)
        self._tag = ""

    def initialize(self, model: ast.TypeIgnore) -> None:
        super().initialize(model)
        self._tag = model.tag


@astvms.ast_node(astvm.mod_vm)
class Module(astvm.mod_vm):
    """
    View Model of ast.Module

    A Python module, as with file input. Node type generated by ast.parse() in the default `"exec"` mode.
    body is a list of the module's Statements.
    type_ignores is a list of the module's type ignore comments; see ast.parse() for more details.
    """

    astvm_name = "Module"
    astvm_category = "Root Nodes"

    body = advanced_qt_property.AdvancedQtProperty("QVariantList")  # type: list[astvm.stmt_vm]
    type_ignores = advanced_qt_property.AdvancedQtProperty("QVariantList")  # type: list[TypeIgnore]

    def __init__(self, parent: QtCore.QObject | None = None) -> None:
        super().__init__(parent)
        self._body = []
        self._type_ignores = []

    def initialize(self, model: ast.Module) -> None:
        super().initialize(model)
        for entry in model.body:
            self._body.append(astvms.create_astvm(entry))
        for entry in model.type_ignores:
            self._type_ignores.append(astvms.create_astvm(entry))


@astvms.ast_node(astvm.mod_vm)
class Expression(astvm.mod_vm):
    """
    View Model of ast.Expression

    A single Python expression input. Node type generated by ast.parse() when mode is `"eval"`.
    body is a single node, one of the expression types.
    """

    astvm_name = "Expression"
    astvm_category = "Root Nodes"

    body = advanced_qt_property.AdvancedQtProperty(astvm.expr_vm)  # type: astvm.expr_vm

    def __init__(self, parent: QtCore.QObject | None = None) -> None:
        super().__init__(parent)
        self._body = None

    def initialize(self, model: ast.Expression) -> None:
        super().initialize(model)
        self._body = astvms.create_astvm(model.body)


@astvms.ast_node(astvm.mod_vm)
class Interactive(astvm.mod_vm):
    """
    View Model of ast.Interactive

    A single interactive input, like in Interactive Mode. Node type generated by ast.parse() when mode is
    `"single"`.
    `body` is a list of statement nodes.
    """

    astvm_name = "Interactive"
    astvm_category = "Root Nodes"

    body = advanced_qt_property.AdvancedQtProperty("QVariantList")  # type: list[astvm.stmt_vm]

    def __init__(self, parent: QtCore.QObject | None = None) -> None:
        super().__init__(parent)
        self._body = []

    def initialize(self, model: ast.Interactive) -> None:
        super().initialize(model)
        for entry in model.body:
            self._body.append(astvms.create_astvm(entry))


@astvms.ast_node(astvm.mod_vm)
class FunctionType(astvm.mod_vm):
    """
    View Model of ast.FunctionType

    A representation of an old-style type comments for functions, as Python versions prior to 3.5 didn't support
    PEP 484 annotations. Node type generated by ast.parse() when mode is "func_type".
    """

    astvm_name = "FunctionType"
    astvm_category = "Root Nodes"

    argtypes = advanced_qt_property.AdvancedQtProperty("QVariantList")  # type: list[astvm.expr_vm]
    returns = advanced_qt_property.AdvancedQtProperty(astvm.expr_vm)  # type: astvm.expr_vm

    def __init__(self, parent: QtCore.QObject | None = None) -> None:
        super().__init__(parent)
        self._argtypes = []
        self._returns = None

    def initialize(self, model: ast.FunctionType) -> None:
        super().initialize(model)
        for entry in model.argtypes:
            self._argtypes.append(astvms.create_astvm(entry))
        self._returns = astvms.create_astvm(model.returns)
